<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Box Game</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f4f4f4;
            font-family: Arial, sans-serif;
            position: relative;
        }

        .start-button, .play-again-button {
            padding: 12px 24px;
            font-size: 18px;
            color: white;
            background-color: #007bff;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;
            margin-bottom: 20px;
        }

        .start-button:hover, .play-again-button:hover {
            background-color: #0056b3;
            transform: scale(1.05);
        }

        .start-button:active, .play-again-button:active {
            transform: scale(0.95);
        }

        .balance {
            font-size: 24px;
            color: #333;
            margin-bottom: 20px;
        }

        .earnings-text {
            font-size: 20px;
            color: #007bff;
            margin-bottom: 20px;
        }

        .box-container {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 15px;
            display: none;
            max-width: 600px;
            width: 100%;
        }

        .box {
            width: 100%;
            padding-top: 100%;
            background-color: #333;
            border-radius: 10px;
            position: relative;
            cursor: pointer;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
        }

        .box:hover {
            transform: scale(1.05);
        }

        .box.open {
            transform: scale(1);
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }

        .box-content {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 100%;
            height: 100%;
            transform: translate(-50%, -50%);
            display: flex;
            justify-content: center;
            align-items: center;
            transition: opacity 0.3s ease;
            opacity: 0;
        }

        .box.open .box-content {
            opacity: 1;
        }

        .box .diamond, .box .bomb {
            max-width: 80%;
            height: auto;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .box.open .diamond {
            display: block;
            animation: diamondRotate 1s ease-in-out infinite;
        }

        .box .bomb {
            display: none;
        }

        .box.show-bomb .bomb {
            display: block;
        }

        .box.show-diamond .diamond {
            display: block;
        }

        .game-over {
            display: none;
            color: white;
            font-size: 24px;
            text-align: center;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 10px;
        }

        .play-again-button {
            display: none;
            animation: buttonVibrate 0.5s ease;
        }

        @keyframes diamondRotate {
            0% {
                transform: rotate(0deg);
                box-shadow: 0 0 10px rgba(0, 255, 255, 0.8);
            }
            50% {
                transform: rotate(180deg);
                box-shadow: 0 0 20px rgba(0, 255, 255, 0.6);
            }
            100% {
                transform: rotate(360deg);
                box-shadow: 0 0 10px rgba(0, 255, 255, 0.8);
            }
        }

        @keyframes buttonVibrate {
            0% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            50% { transform: translateX(5px); }
            75% { transform: translateX(-5px); }
            100% { transform: translateX(0); }
        }
    </style>
</head>
<body>
    <button class="start-button" onclick="startGame()">Start</button>
    <div class="balance" id="balance">$0</div>
    <div class="earnings-text" id="earningsText"></div>
    <div class="box-container" id="boxContainer">
        <!-- Boxes will be generated by JavaScript -->
    </div>
    <div class="game-over" id="gameOver">
        Game Over! You clicked a bomb ðŸ’£
        <div>Click below to play again for $25</div>
    </div>
    <button class="play-again-button" id="playAgainButton" onclick="playAgain()">Play Again ($25)</button>

    <script>
        const TOTAL_BOXES = 25;
        const TOTAL_BOMBS = 5;
        const RESTART_COST = 25;
        let bombIndices = [];
        let balance = 0;
        let gameStarted = false;

        function startGame() {
            document.body.style.backgroundColor = 'black';
            document.querySelector('.start-button').style.display = 'none';
            document.querySelector('.play-again-button').style.display = 'none';
            document.querySelector('.game-over').style.display = 'none';
            const boxContainer = document.getElementById('boxContainer');
            boxContainer.style.display = 'grid';

            // Clear existing boxes
            boxContainer.innerHTML = '';

            // Randomly assign bombs to boxes
            bombIndices = [];
            while (bombIndices.length < TOTAL_BOMBS) {
                let randIndex = Math.floor(Math.random() * TOTAL_BOXES);
                if (!bombIndices.includes(randIndex)) {
                    bombIndices.push(randIndex);
                }
            }
            console.log('Bomb Indices:', bombIndices);

            // Generate 25 boxes
            for (let i = 0; i < TOTAL_BOXES; i++) {
                const box = document.createElement('div');
                box.className = 'box';

                const boxContent = document.createElement('div');
                boxContent.className = 'box-content';

                if (bombIndices.includes(i)) {
                    const bombIcon = document.createElement('img');
                    bombIcon.src = 'https://iconarchive.com/download/i107958/google/noto-emoji-animals-nature/boombox.ico';
                    bombIcon.className = 'bomb';
                    boxContent.appendChild(bombIcon);
                } else {
                    const diamondIcon = document.createElement('img');
                    diamondIcon.src = 'https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgGgofdM4Y6fNmc0BJmDQ0RiuBw-mgS2qgB6O-NPL_5xqaG4V9SweVvI1kr_8ClRauHTbtfesdwXzwY-JZ0rbXo9lqlZ2HoYKD-caawg4hteWHF_DZAalDyZhLVdCa5x5ZwCNQNHhSCh_Eox2hpdtlQHlBqkAQ8y9Gt9TKEi-_bFD4YdrUIPmH1RLSfB_A/s320/image_search_1726295316432-removebg-preview.png';
                    diamondIcon.className = 'diamond';
                    boxContent.appendChild(diamondIcon);
                }

                box.appendChild(boxContent);

                box.addEventListener('click', function handleBoxClick() {
                    if (!gameStarted) return;

                    if (bombIndices.includes(i)) {
                        this.classList.add('open', 'show-bomb');
                        document.getElementById('gameOver').style.display = 'block';
                        document.querySelector('.play-again-button').style.display = 'block';
                        document.body.classList.add('shaking');
                        setTimeout(() => document.body.classList.remove('shaking'), 500);
                        gameStarted = false;
                        disableAllBoxes();
                    } else {
                        this.classList.add('open', 'show-diamond');
                        const earning = getRandomEarning();
                        updateBalance(earning);
                        showEarningsText(earning);
                    }
                });

                boxContainer.appendChild(box);
            }

            gameStarted = true;
        }

        function getRandomEarning() {
            return Math.floor(Math.random() * (30 - 1 + 1)) + 1;
        }

        function updateBalance(amount) {
            balance += amount;
            document.getElementById('balance').textContent = `$${balance}`;
        }

        function showEarningsText(amount) {
            const earningsTextElement = document.getElementById('earningsText');
            earningsTextElement.textContent = `You earned $${amount}`;
            setTimeout(() => {
                earningsTextElement.textContent = '';
            }, 1000);
        }

        function disableAllBoxes() {
            const boxes = document.querySelectorAll('.box');
            boxes.forEach(box => {
                box.removeEventListener('click', handleBoxClick);
                box.classList.add('open');
            });
        }

        function playAgain() {
            if (balance >= RESTART_COST) {
                balance -= RESTART_COST;
                document.getElementById('balance').textContent = `$${balance}`;
                document.getElementById('gameOver').style.display = 'none';
                document.querySelector('.play-again-button').style.display = 'none';
                startGame();
            } else {
                alert('Insufficient balance to play again.');
            }
        }
    </script>
</body>
</html>
